/*! \mainpage Optimal Control based Table Tennis Trajectory Generation
 *
 * \section intro_sec Introduction
 *
 * Welcome to Table Tennis!
 *
 * Player class is the orchestrator for Table Tennis
 * which can call three different trajectory optimizers for table tennis.
 * These are 3rd order striking and returning polynomials computed
 * differently for each method.
 *
 * We provide three modes for testing/playing table tennis:
 * 1. Unit Tests, here the performances of three different players are compared.
 * 2. SL, here the simulation is real-time so threads are detached.
 * 3. Real-Robot, here filtering and trajectory corrections are more robust,
 *                outlier detection is also considered for instance.
 *
 * For the modes (2) and (3) configuration file "player.cfg" sets the modes
 * for the player class, these can be changed online (assuming robot has no task).
 *
 *
 * \section install_sec Installation
 *
 * After pulling run 'make install'.
 * This will allow us to run the unit tests
 * where we can validate the results found in the paper.
 * Make sure to type 'make test' and run ./unit_tests.o
 *
 * \section test_sec Unit Tests
 *
 * The unit tests, use boost testing framework and do not only
 * consider 'unit' tests for each method, but also general scripts for various
 * test scenarios. For instance
 *
 * 1. Does the ball land on the other side?
 * 2. Which method (1 = VHP, 2 = FP, 3 = DP) can land more balls?
 * 3. Is correction of trajectories useful when you have observation noise
 *    or  ball prediction error?
 * 4. Are the filters stable? Can we estimate ball state better as we get more data?
 *
 *
 */
